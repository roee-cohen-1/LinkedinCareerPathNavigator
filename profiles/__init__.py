from pyspark.sql.functions import lower as _lower, col as _col

_technology_related_words = [
    "software",
    "hardware",
    "engineer",
    "developer",
    "development",
    "programming",
    "programmer",
    "coding",
    "code",
    "technology",
    "technologies",
    "it",
    "information technology",
    "networking",
    "cybersecurity",
    "data",
    "database",
    "analytics",
    "analyst",
    "ai",
    "artificial intelligence",
    "machine learning",
    "ml",
    "cloud",
    "computing",
    "web",
    "internet",
    "vr",
    "virtual reality",
    "ar",
    "augmented reality",
    "iot",
    "internet of things",
    "app",
    "application",
    "software",
    "tech",
    "technical",
    "technician",
    "infrastructure",
    "blockchain",
    "crypto",
    "cryptocurrency",
    "automation",
    "robotics",
    "electronics",
    "electronic",
    "saas",
    "software as a service",
    "paas",
    "platform as a service",
    "iaas",
    "infrastructure as a service",
    "frontend",
    "backend",
    "full-stack",
    "ui",
    "user interface",
    "ux",
    "user experience",
    "qa",
    "quality assurance",
    "devops",
    "development operations",
    "site reliability",
    "sre",
    "biotechnology",
    "nanotechnology",
    "fintech",
    "financial technology",
    "edtech",
    "educational technology",
    "healthtech",
    "healthcare technology",
    "cleantech",
    "clean technology",
    "agritech",
    "agricultural technology",
    "product",
    "project",
    "cto",
    "chief technology officer",
    "cio",
    "chief information officer",
    "integration",
    "research",
    "r&d",
    "research and development",
    "science",
    "scientist",
    "engineering",
    "biotech",
    "pharma",
    "pharmaceutical",
    "telecommunications",
    "telecom",
    "semiconductor",
    "chip",
    "processor",
    "computational",
    "algorithm",
    "algorithmic",
    "analytics",
    "analytical",
    "big data",
    "data science",
    "data scientist",
    "data engineering",
    "data engineer",
    "data architect",
    "business intelligence",
    "bi",
    "storage",
    "cloud engineer",
    "cloud architect",
    "network engineer",
    "network architect",
    "security analyst",
    "information security",
    "penetration tester",
    "ethical hacker",
    "cyber defense",
    "cyber analyst",
]


def filter_tech_profiles(profiles):
    filtered = profiles \
        .filter('experience is not null and size(experience) > 0 and education is not null and size(education) > 0 and position is not null and position != "" and position != "--"') \
        .select('id', 'position')
    expr = '(' + '|'.join(f' {k} ' for k in _technology_related_words) + ')'
    return filtered.select('id', _lower('position').alias('position')).where(_col('position').rlike(expr)).select('id')


# for testing
if __name__ == '__main__':
    import sparknlp
    spark = sparknlp.start()

    profiles = spark.read.parquet('/linkedin/people')
    technology_ids = filter_tech_profiles(profiles).select(_col('id').alias('t_id'))
    profiles = profiles \
        .join(technology_ids, profiles.id == technology_ids.t_id, 'inner') \
        .drop('t_id')
    profiles.printSchema()

